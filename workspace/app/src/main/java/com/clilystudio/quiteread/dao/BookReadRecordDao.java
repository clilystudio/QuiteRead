package com.clilystudio.quiteread.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.clilystudio.quiteread.db.BookReadRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BookReadRecords".
*/
public class BookReadRecordDao extends AbstractDao<BookReadRecord, Void> {

    public static final String TABLENAME = "BookReadRecords";

    /**
     * Properties of entity BookReadRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Have_cp = new Property(0, int.class, "have_cp", false, "have_cp");
        public final static Property LastActionTime = new Property(1, long.class, "lastActionTime", false, "lastActionTime");
        public final static Property ReadTime = new Property(2, java.util.Date.class, "readTime", false, "readTime");
        public final static Property Recommended = new Property(3, boolean.class, "recommended", false, "recommended");
        public final static Property Account = new Property(4, String.class, "account", false, "account");
        public final static Property Author = new Property(5, String.class, "author", false, "author");
        public final static Property Book_id = new Property(6, String.class, "book_id", false, "book_id");
        public final static Property ChapterCount = new Property(7, int.class, "chapterCount", false, "chapterCount");
        public final static Property ChapterCountAtFeed = new Property(8, int.class, "chapterCountAtFeed", false, "chapterCountAtFeed");
        public final static Property ChapterTitle = new Property(9, String.class, "chapterTitle", false, "chapterTitle");
        public final static Property Cover = new Property(10, String.class, "cover", false, "cover");
        public final static Property Deleted = new Property(11, boolean.class, "deleted", false, "deleted");
        public final static Property DownloadedSource = new Property(12, String.class, "downloadedSource", false, "downloadedSource");
        public final static Property FeedFat = new Property(13, boolean.class, "feedFat", false, "feedFat");
        public final static Property Feeding = new Property(14, boolean.class, "feeding", false, "feeding");
        public final static Property Is_top = new Property(15, boolean.class, "is_top", false, "is_top");
        public final static Property Is_unread = new Property(16, boolean.class, "is_unread", false, "is_unread");
        public final static Property Last_chapter = new Property(17, String.class, "last_chapter", false, "last_chapter");
        public final static Property LocalModifiedDate = new Property(18, java.util.Date.class, "localModifiedDate", false, "localModifiedDate");
        public final static Property ReadMode = new Property(19, int.class, "readMode", false, "readMode");
        public final static Property Title = new Property(20, String.class, "title", false, "title");
        public final static Property TocIndex = new Property(21, int.class, "tocIndex", false, "tocIndex");
        public final static Property Toc_id = new Property(22, String.class, "toc_id", false, "toc_id");
        public final static Property Updated = new Property(23, java.util.Date.class, "updated", false, "updated");
    }


    public BookReadRecordDao(DaoConfig config) {
        super(config);
    }
    
    public BookReadRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BookReadRecords\" (" + //
                "\"have_cp\" INTEGER NOT NULL ," + // 0: have_cp
                "\"lastActionTime\" INTEGER NOT NULL ," + // 1: lastActionTime
                "\"readTime\" INTEGER," + // 2: readTime
                "\"recommended\" INTEGER NOT NULL ," + // 3: recommended
                "\"account\" TEXT," + // 4: account
                "\"author\" TEXT," + // 5: author
                "\"book_id\" TEXT," + // 6: book_id
                "\"chapterCount\" INTEGER NOT NULL ," + // 7: chapterCount
                "\"chapterCountAtFeed\" INTEGER NOT NULL ," + // 8: chapterCountAtFeed
                "\"chapterTitle\" TEXT," + // 9: chapterTitle
                "\"cover\" TEXT," + // 10: cover
                "\"deleted\" INTEGER NOT NULL ," + // 11: deleted
                "\"downloadedSource\" TEXT," + // 12: downloadedSource
                "\"feedFat\" INTEGER NOT NULL ," + // 13: feedFat
                "\"feeding\" INTEGER NOT NULL ," + // 14: feeding
                "\"is_top\" INTEGER NOT NULL ," + // 15: is_top
                "\"is_unread\" INTEGER NOT NULL ," + // 16: is_unread
                "\"last_chapter\" TEXT," + // 17: last_chapter
                "\"localModifiedDate\" INTEGER," + // 18: localModifiedDate
                "\"readMode\" INTEGER NOT NULL ," + // 19: readMode
                "\"title\" TEXT," + // 20: title
                "\"tocIndex\" INTEGER NOT NULL ," + // 21: tocIndex
                "\"toc_id\" TEXT," + // 22: toc_id
                "\"updated\" INTEGER);"); // 23: updated
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BookReadRecords\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookReadRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getHave_cp());
        stmt.bindLong(2, entity.getLastActionTime());
 
        java.util.Date readTime = entity.getReadTime();
        if (readTime != null) {
            stmt.bindLong(3, readTime.getTime());
        }
        stmt.bindLong(4, entity.getRecommended() ? 1L: 0L);
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(5, account);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        String book_id = entity.getBook_id();
        if (book_id != null) {
            stmt.bindString(7, book_id);
        }
        stmt.bindLong(8, entity.getChapterCount());
        stmt.bindLong(9, entity.getChapterCountAtFeed());
 
        String chapterTitle = entity.getChapterTitle();
        if (chapterTitle != null) {
            stmt.bindString(10, chapterTitle);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(11, cover);
        }
        stmt.bindLong(12, entity.getDeleted() ? 1L: 0L);
 
        String downloadedSource = entity.getDownloadedSource();
        if (downloadedSource != null) {
            stmt.bindString(13, downloadedSource);
        }
        stmt.bindLong(14, entity.getFeedFat() ? 1L: 0L);
        stmt.bindLong(15, entity.getFeeding() ? 1L: 0L);
        stmt.bindLong(16, entity.getIs_top() ? 1L: 0L);
        stmt.bindLong(17, entity.getIs_unread() ? 1L: 0L);
 
        String last_chapter = entity.getLast_chapter();
        if (last_chapter != null) {
            stmt.bindString(18, last_chapter);
        }
 
        java.util.Date localModifiedDate = entity.getLocalModifiedDate();
        if (localModifiedDate != null) {
            stmt.bindLong(19, localModifiedDate.getTime());
        }
        stmt.bindLong(20, entity.getReadMode());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(21, title);
        }
        stmt.bindLong(22, entity.getTocIndex());
 
        String toc_id = entity.getToc_id();
        if (toc_id != null) {
            stmt.bindString(23, toc_id);
        }
 
        java.util.Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(24, updated.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookReadRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getHave_cp());
        stmt.bindLong(2, entity.getLastActionTime());
 
        java.util.Date readTime = entity.getReadTime();
        if (readTime != null) {
            stmt.bindLong(3, readTime.getTime());
        }
        stmt.bindLong(4, entity.getRecommended() ? 1L: 0L);
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(5, account);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        String book_id = entity.getBook_id();
        if (book_id != null) {
            stmt.bindString(7, book_id);
        }
        stmt.bindLong(8, entity.getChapterCount());
        stmt.bindLong(9, entity.getChapterCountAtFeed());
 
        String chapterTitle = entity.getChapterTitle();
        if (chapterTitle != null) {
            stmt.bindString(10, chapterTitle);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(11, cover);
        }
        stmt.bindLong(12, entity.getDeleted() ? 1L: 0L);
 
        String downloadedSource = entity.getDownloadedSource();
        if (downloadedSource != null) {
            stmt.bindString(13, downloadedSource);
        }
        stmt.bindLong(14, entity.getFeedFat() ? 1L: 0L);
        stmt.bindLong(15, entity.getFeeding() ? 1L: 0L);
        stmt.bindLong(16, entity.getIs_top() ? 1L: 0L);
        stmt.bindLong(17, entity.getIs_unread() ? 1L: 0L);
 
        String last_chapter = entity.getLast_chapter();
        if (last_chapter != null) {
            stmt.bindString(18, last_chapter);
        }
 
        java.util.Date localModifiedDate = entity.getLocalModifiedDate();
        if (localModifiedDate != null) {
            stmt.bindLong(19, localModifiedDate.getTime());
        }
        stmt.bindLong(20, entity.getReadMode());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(21, title);
        }
        stmt.bindLong(22, entity.getTocIndex());
 
        String toc_id = entity.getToc_id();
        if (toc_id != null) {
            stmt.bindString(23, toc_id);
        }
 
        java.util.Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(24, updated.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BookReadRecord readEntity(Cursor cursor, int offset) {
        BookReadRecord entity = new BookReadRecord( //
            cursor.getInt(offset + 0), // have_cp
            cursor.getLong(offset + 1), // lastActionTime
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // readTime
            cursor.getShort(offset + 3) != 0, // recommended
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // account
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // author
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // book_id
            cursor.getInt(offset + 7), // chapterCount
            cursor.getInt(offset + 8), // chapterCountAtFeed
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // chapterTitle
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // cover
            cursor.getShort(offset + 11) != 0, // deleted
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // downloadedSource
            cursor.getShort(offset + 13) != 0, // feedFat
            cursor.getShort(offset + 14) != 0, // feeding
            cursor.getShort(offset + 15) != 0, // is_top
            cursor.getShort(offset + 16) != 0, // is_unread
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // last_chapter
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // localModifiedDate
            cursor.getInt(offset + 19), // readMode
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // title
            cursor.getInt(offset + 21), // tocIndex
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // toc_id
            cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)) // updated
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookReadRecord entity, int offset) {
        entity.setHave_cp(cursor.getInt(offset + 0));
        entity.setLastActionTime(cursor.getLong(offset + 1));
        entity.setReadTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setRecommended(cursor.getShort(offset + 3) != 0);
        entity.setAccount(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBook_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChapterCount(cursor.getInt(offset + 7));
        entity.setChapterCountAtFeed(cursor.getInt(offset + 8));
        entity.setChapterTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCover(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDeleted(cursor.getShort(offset + 11) != 0);
        entity.setDownloadedSource(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFeedFat(cursor.getShort(offset + 13) != 0);
        entity.setFeeding(cursor.getShort(offset + 14) != 0);
        entity.setIs_top(cursor.getShort(offset + 15) != 0);
        entity.setIs_unread(cursor.getShort(offset + 16) != 0);
        entity.setLast_chapter(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLocalModifiedDate(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setReadMode(cursor.getInt(offset + 19));
        entity.setTitle(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTocIndex(cursor.getInt(offset + 21));
        entity.setToc_id(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUpdated(cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BookReadRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BookReadRecord entity) {
        return null;
    }

    @Override
    public boolean hasKey(BookReadRecord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
