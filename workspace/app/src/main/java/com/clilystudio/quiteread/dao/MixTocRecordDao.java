package com.clilystudio.quiteread.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.clilystudio.quiteread.db.MixTocRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MixTocRecords".
*/
public class MixTocRecordDao extends AbstractDao<MixTocRecord, Void> {

    public static final String TABLENAME = "MixTocRecords";

    /**
     * Properties of entity MixTocRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookId = new Property(0, String.class, "bookId", false, "bookId");
        public final static Property ChapterIndex = new Property(1, int.class, "chapterIndex", false, "chapterIndex");
        public final static Property ChapterTitle = new Property(2, String.class, "chapterTitle", false, "chapterTitle");
        public final static Property CharIndex = new Property(3, int.class, "charIndex", false, "charIndex");
        public final static Property TocId = new Property(4, String.class, "tocId", false, "tocId");
    }


    public MixTocRecordDao(DaoConfig config) {
        super(config);
    }
    
    public MixTocRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MixTocRecords\" (" + //
                "\"bookId\" TEXT," + // 0: bookId
                "\"chapterIndex\" INTEGER NOT NULL ," + // 1: chapterIndex
                "\"chapterTitle\" TEXT," + // 2: chapterTitle
                "\"charIndex\" INTEGER NOT NULL ," + // 3: charIndex
                "\"tocId\" TEXT);"); // 4: tocId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MixTocRecords\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MixTocRecord entity) {
        stmt.clearBindings();
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(1, bookId);
        }
        stmt.bindLong(2, entity.getChapterIndex());
 
        String chapterTitle = entity.getChapterTitle();
        if (chapterTitle != null) {
            stmt.bindString(3, chapterTitle);
        }
        stmt.bindLong(4, entity.getCharIndex());
 
        String tocId = entity.getTocId();
        if (tocId != null) {
            stmt.bindString(5, tocId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MixTocRecord entity) {
        stmt.clearBindings();
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(1, bookId);
        }
        stmt.bindLong(2, entity.getChapterIndex());
 
        String chapterTitle = entity.getChapterTitle();
        if (chapterTitle != null) {
            stmt.bindString(3, chapterTitle);
        }
        stmt.bindLong(4, entity.getCharIndex());
 
        String tocId = entity.getTocId();
        if (tocId != null) {
            stmt.bindString(5, tocId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MixTocRecord readEntity(Cursor cursor, int offset) {
        MixTocRecord entity = new MixTocRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookId
            cursor.getInt(offset + 1), // chapterIndex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chapterTitle
            cursor.getInt(offset + 3), // charIndex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // tocId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MixTocRecord entity, int offset) {
        entity.setBookId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChapterIndex(cursor.getInt(offset + 1));
        entity.setChapterTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCharIndex(cursor.getInt(offset + 3));
        entity.setTocId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MixTocRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MixTocRecord entity) {
        return null;
    }

    @Override
    public boolean hasKey(MixTocRecord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
