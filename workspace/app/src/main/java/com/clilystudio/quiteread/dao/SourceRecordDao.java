package com.clilystudio.quiteread.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.clilystudio.quiteread.db.SourceRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SourceRecord".
*/
public class SourceRecordDao extends AbstractDao<SourceRecord, Void> {

    public static final String TABLENAME = "SourceRecord";

    /**
     * Properties of entity SourceRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookId = new Property(0, String.class, "bookId", false, "bookId");
        public final static Property SogouMd = new Property(1, String.class, "sogouMd", false, "sogouMd");
        public final static Property Source = new Property(2, String.class, "source", false, "source");
        public final static Property SourceId = new Property(3, String.class, "sourceId", false, "sourceId");
    }


    public SourceRecordDao(DaoConfig config) {
        super(config);
    }
    
    public SourceRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SourceRecord\" (" + //
                "\"bookId\" TEXT," + // 0: bookId
                "\"sogouMd\" TEXT," + // 1: sogouMd
                "\"source\" TEXT," + // 2: source
                "\"sourceId\" TEXT);"); // 3: sourceId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SourceRecord\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SourceRecord entity) {
        stmt.clearBindings();
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(1, bookId);
        }
 
        String sogouMd = entity.getSogouMd();
        if (sogouMd != null) {
            stmt.bindString(2, sogouMd);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(3, source);
        }
 
        String sourceId = entity.getSourceId();
        if (sourceId != null) {
            stmt.bindString(4, sourceId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SourceRecord entity) {
        stmt.clearBindings();
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(1, bookId);
        }
 
        String sogouMd = entity.getSogouMd();
        if (sogouMd != null) {
            stmt.bindString(2, sogouMd);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(3, source);
        }
 
        String sourceId = entity.getSourceId();
        if (sourceId != null) {
            stmt.bindString(4, sourceId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SourceRecord readEntity(Cursor cursor, int offset) {
        SourceRecord entity = new SourceRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sogouMd
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // source
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // sourceId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SourceRecord entity, int offset) {
        entity.setBookId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSogouMd(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSource(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSourceId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SourceRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SourceRecord entity) {
        return null;
    }

    @Override
    public boolean hasKey(SourceRecord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
