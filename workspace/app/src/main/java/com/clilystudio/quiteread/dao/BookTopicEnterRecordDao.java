package com.clilystudio.quiteread.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.clilystudio.quiteread.db.BookTopicEnterRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BookTopicEnterRecord".
*/
public class BookTopicEnterRecordDao extends AbstractDao<BookTopicEnterRecord, Void> {

    public static final String TABLENAME = "BookTopicEnterRecord";

    /**
     * Properties of entity BookTopicEnterRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Book_id = new Property(0, String.class, "book_id", false, "book_id");
        public final static Property Time = new Property(1, java.util.Date.class, "time", false, "time");
        public final static Property VisitCount = new Property(2, int.class, "visitCount", false, "visit_count");
    }


    public BookTopicEnterRecordDao(DaoConfig config) {
        super(config);
    }
    
    public BookTopicEnterRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BookTopicEnterRecord\" (" + //
                "\"book_id\" TEXT," + // 0: book_id
                "\"time\" INTEGER," + // 1: time
                "\"visit_count\" INTEGER NOT NULL );"); // 2: visitCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BookTopicEnterRecord\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookTopicEnterRecord entity) {
        stmt.clearBindings();
 
        String book_id = entity.getBook_id();
        if (book_id != null) {
            stmt.bindString(1, book_id);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time.getTime());
        }
        stmt.bindLong(3, entity.getVisitCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookTopicEnterRecord entity) {
        stmt.clearBindings();
 
        String book_id = entity.getBook_id();
        if (book_id != null) {
            stmt.bindString(1, book_id);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time.getTime());
        }
        stmt.bindLong(3, entity.getVisitCount());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BookTopicEnterRecord readEntity(Cursor cursor, int offset) {
        BookTopicEnterRecord entity = new BookTopicEnterRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // book_id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // time
            cursor.getInt(offset + 2) // visitCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookTopicEnterRecord entity, int offset) {
        entity.setBook_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setVisitCount(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BookTopicEnterRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BookTopicEnterRecord entity) {
        return null;
    }

    @Override
    public boolean hasKey(BookTopicEnterRecord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
