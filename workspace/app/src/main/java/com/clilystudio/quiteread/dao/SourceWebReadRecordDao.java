package com.clilystudio.quiteread.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.clilystudio.quiteread.db.SourceWebReadRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SourceWebReadRecord".
*/
public class SourceWebReadRecordDao extends AbstractDao<SourceWebReadRecord, Void> {

    public static final String TABLENAME = "SourceWebReadRecord";

    /**
     * Properties of entity SourceWebReadRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", false, "_id");
        public final static Property BookId = new Property(1, String.class, "bookId", false, "bookId");
        public final static Property ChapterIndex = new Property(2, int.class, "chapterIndex", false, "chapterIndex");
        public final static Property Cmd = new Property(3, String.class, "cmd", false, "cmd");
        public final static Property ReadMode = new Property(4, int.class, "readMode", false, "readMode");
    }


    public SourceWebReadRecordDao(DaoConfig config) {
        super(config);
    }
    
    public SourceWebReadRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SourceWebReadRecord\" (" + //
                "\"_id\" TEXT," + // 0: _id
                "\"bookId\" TEXT," + // 1: bookId
                "\"chapterIndex\" INTEGER NOT NULL ," + // 2: chapterIndex
                "\"cmd\" TEXT," + // 3: cmd
                "\"readMode\" INTEGER NOT NULL );"); // 4: readMode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SourceWebReadRecord\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SourceWebReadRecord entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(2, bookId);
        }
        stmt.bindLong(3, entity.getChapterIndex());
 
        String cmd = entity.getCmd();
        if (cmd != null) {
            stmt.bindString(4, cmd);
        }
        stmt.bindLong(5, entity.getReadMode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SourceWebReadRecord entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(2, bookId);
        }
        stmt.bindLong(3, entity.getChapterIndex());
 
        String cmd = entity.getCmd();
        if (cmd != null) {
            stmt.bindString(4, cmd);
        }
        stmt.bindLong(5, entity.getReadMode());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SourceWebReadRecord readEntity(Cursor cursor, int offset) {
        SourceWebReadRecord entity = new SourceWebReadRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookId
            cursor.getInt(offset + 2), // chapterIndex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cmd
            cursor.getInt(offset + 4) // readMode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SourceWebReadRecord entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChapterIndex(cursor.getInt(offset + 2));
        entity.setCmd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReadMode(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SourceWebReadRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SourceWebReadRecord entity) {
        return null;
    }

    @Override
    public boolean hasKey(SourceWebReadRecord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
