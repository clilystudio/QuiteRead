package com.clilystudio.quiteread.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.clilystudio.quiteread.db.RetweenRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RetweenRecord".
*/
public class RetweenRecordDao extends AbstractDao<RetweenRecord, Void> {

    public static final String TABLENAME = "RetweenRecord";

    /**
     * Properties of entity RetweenRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TweetId = new Property(0, String.class, "tweetId", false, "tweetId");
        public final static Property UserId = new Property(1, String.class, "userId", false, "userId");
    }


    public RetweenRecordDao(DaoConfig config) {
        super(config);
    }
    
    public RetweenRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RetweenRecord\" (" + //
                "\"tweetId\" TEXT," + // 0: tweetId
                "\"userId\" TEXT);"); // 1: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RetweenRecord\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RetweenRecord entity) {
        stmt.clearBindings();
 
        String tweetId = entity.getTweetId();
        if (tweetId != null) {
            stmt.bindString(1, tweetId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RetweenRecord entity) {
        stmt.clearBindings();
 
        String tweetId = entity.getTweetId();
        if (tweetId != null) {
            stmt.bindString(1, tweetId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public RetweenRecord readEntity(Cursor cursor, int offset) {
        RetweenRecord entity = new RetweenRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // tweetId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RetweenRecord entity, int offset) {
        entity.setTweetId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(RetweenRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(RetweenRecord entity) {
        return null;
    }

    @Override
    public boolean hasKey(RetweenRecord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
