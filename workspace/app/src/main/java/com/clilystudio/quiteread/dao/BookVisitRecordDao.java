package com.clilystudio.quiteread.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.clilystudio.quiteread.db.BookVisitRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BookVisitRecord".
*/
public class BookVisitRecordDao extends AbstractDao<BookVisitRecord, Void> {

    public static final String TABLENAME = "BookVisitRecord";

    /**
     * Properties of entity BookVisitRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookId = new Property(0, String.class, "bookId", false, "bookId");
        public final static Property HasGroup = new Property(1, boolean.class, "hasGroup", false, "hasGroup");
    }


    public BookVisitRecordDao(DaoConfig config) {
        super(config);
    }
    
    public BookVisitRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BookVisitRecord\" (" + //
                "\"bookId\" TEXT," + // 0: bookId
                "\"hasGroup\" INTEGER NOT NULL );"); // 1: hasGroup
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BookVisitRecord\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookVisitRecord entity) {
        stmt.clearBindings();
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(1, bookId);
        }
        stmt.bindLong(2, entity.getHasGroup() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookVisitRecord entity) {
        stmt.clearBindings();
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(1, bookId);
        }
        stmt.bindLong(2, entity.getHasGroup() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BookVisitRecord readEntity(Cursor cursor, int offset) {
        BookVisitRecord entity = new BookVisitRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookId
            cursor.getShort(offset + 1) != 0 // hasGroup
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookVisitRecord entity, int offset) {
        entity.setBookId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setHasGroup(cursor.getShort(offset + 1) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BookVisitRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BookVisitRecord entity) {
        return null;
    }

    @Override
    public boolean hasKey(BookVisitRecord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
