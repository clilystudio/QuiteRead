package com.clilystudio.quiteread.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.clilystudio.quiteread.db.BookFile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BookFile".
*/
public class BookFileDao extends AbstractDao<BookFile, Void> {

    public static final String TABLENAME = "BookFile";

    /**
     * Properties of entity BookFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FilePath = new Property(0, String.class, "filePath", false, "file_path");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Progress = new Property(2, float.class, "progress", false, "progress");
        public final static Property ProgressChapterIndex = new Property(3, int.class, "progressChapterIndex", false, "progress_chapter_index");
        public final static Property ProgressCharOffset = new Property(4, int.class, "progressCharOffset", false, "progress_char_offset");
        public final static Property Size = new Property(5, String.class, "size", false, "size");
        public final static Property Top = new Property(6, boolean.class, "top", false, "top");
        public final static Property Updated = new Property(7, java.util.Date.class, "updated", false, "updated");
    }


    public BookFileDao(DaoConfig config) {
        super(config);
    }
    
    public BookFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BookFile\" (" + //
                "\"file_path\" TEXT," + // 0: filePath
                "\"name\" TEXT," + // 1: name
                "\"progress\" REAL NOT NULL ," + // 2: progress
                "\"progress_chapter_index\" INTEGER NOT NULL ," + // 3: progressChapterIndex
                "\"progress_char_offset\" INTEGER NOT NULL ," + // 4: progressCharOffset
                "\"size\" TEXT," + // 5: size
                "\"top\" INTEGER NOT NULL ," + // 6: top
                "\"updated\" INTEGER);"); // 7: updated
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BookFile\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookFile entity) {
        stmt.clearBindings();
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(1, filePath);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindDouble(3, entity.getProgress());
        stmt.bindLong(4, entity.getProgressChapterIndex());
        stmt.bindLong(5, entity.getProgressCharOffset());
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(6, size);
        }
        stmt.bindLong(7, entity.getTop() ? 1L: 0L);
 
        java.util.Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(8, updated.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookFile entity) {
        stmt.clearBindings();
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(1, filePath);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindDouble(3, entity.getProgress());
        stmt.bindLong(4, entity.getProgressChapterIndex());
        stmt.bindLong(5, entity.getProgressCharOffset());
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(6, size);
        }
        stmt.bindLong(7, entity.getTop() ? 1L: 0L);
 
        java.util.Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(8, updated.getTime());
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BookFile readEntity(Cursor cursor, int offset) {
        BookFile entity = new BookFile( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // filePath
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getFloat(offset + 2), // progress
            cursor.getInt(offset + 3), // progressChapterIndex
            cursor.getInt(offset + 4), // progressCharOffset
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // size
            cursor.getShort(offset + 6) != 0, // top
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // updated
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookFile entity, int offset) {
        entity.setFilePath(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProgress(cursor.getFloat(offset + 2));
        entity.setProgressChapterIndex(cursor.getInt(offset + 3));
        entity.setProgressCharOffset(cursor.getInt(offset + 4));
        entity.setSize(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTop(cursor.getShort(offset + 6) != 0);
        entity.setUpdated(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BookFile entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BookFile entity) {
        return null;
    }

    @Override
    public boolean hasKey(BookFile entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
