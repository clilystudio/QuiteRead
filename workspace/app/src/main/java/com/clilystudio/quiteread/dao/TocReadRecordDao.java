package com.clilystudio.quiteread.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.clilystudio.quiteread.db.TocReadRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TocReadRecords".
*/
public class TocReadRecordDao extends AbstractDao<TocReadRecord, Void> {

    public static final String TABLENAME = "TocReadRecords";

    /**
     * Properties of entity TocReadRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Book_id = new Property(0, String.class, "book_id", false, "book_id");
        public final static Property Chapter_num = new Property(1, int.class, "chapter_num", false, "chapter_num");
        public final static Property Chapter_title = new Property(2, String.class, "chapter_title", false, "chapter_title");
        public final static Property Character_num = new Property(3, int.class, "character_num", false, "character_num");
        public final static Property Toc_id = new Property(4, String.class, "toc_id", false, "toc_id");
        public final static Property Toc_name = new Property(5, String.class, "toc_name", false, "toc_name");
    }


    public TocReadRecordDao(DaoConfig config) {
        super(config);
    }
    
    public TocReadRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TocReadRecords\" (" + //
                "\"book_id\" TEXT," + // 0: book_id
                "\"chapter_num\" INTEGER NOT NULL ," + // 1: chapter_num
                "\"chapter_title\" TEXT," + // 2: chapter_title
                "\"character_num\" INTEGER NOT NULL ," + // 3: character_num
                "\"toc_id\" TEXT," + // 4: toc_id
                "\"toc_name\" TEXT);"); // 5: toc_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TocReadRecords\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TocReadRecord entity) {
        stmt.clearBindings();
 
        String book_id = entity.getBook_id();
        if (book_id != null) {
            stmt.bindString(1, book_id);
        }
        stmt.bindLong(2, entity.getChapter_num());
 
        String chapter_title = entity.getChapter_title();
        if (chapter_title != null) {
            stmt.bindString(3, chapter_title);
        }
        stmt.bindLong(4, entity.getCharacter_num());
 
        String toc_id = entity.getToc_id();
        if (toc_id != null) {
            stmt.bindString(5, toc_id);
        }
 
        String toc_name = entity.getToc_name();
        if (toc_name != null) {
            stmt.bindString(6, toc_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TocReadRecord entity) {
        stmt.clearBindings();
 
        String book_id = entity.getBook_id();
        if (book_id != null) {
            stmt.bindString(1, book_id);
        }
        stmt.bindLong(2, entity.getChapter_num());
 
        String chapter_title = entity.getChapter_title();
        if (chapter_title != null) {
            stmt.bindString(3, chapter_title);
        }
        stmt.bindLong(4, entity.getCharacter_num());
 
        String toc_id = entity.getToc_id();
        if (toc_id != null) {
            stmt.bindString(5, toc_id);
        }
 
        String toc_name = entity.getToc_name();
        if (toc_name != null) {
            stmt.bindString(6, toc_name);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TocReadRecord readEntity(Cursor cursor, int offset) {
        TocReadRecord entity = new TocReadRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // book_id
            cursor.getInt(offset + 1), // chapter_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chapter_title
            cursor.getInt(offset + 3), // character_num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // toc_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // toc_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TocReadRecord entity, int offset) {
        entity.setBook_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChapter_num(cursor.getInt(offset + 1));
        entity.setChapter_title(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCharacter_num(cursor.getInt(offset + 3));
        entity.setToc_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setToc_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TocReadRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TocReadRecord entity) {
        return null;
    }

    @Override
    public boolean hasKey(TocReadRecord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
