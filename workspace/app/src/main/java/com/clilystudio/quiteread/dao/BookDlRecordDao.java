package com.clilystudio.quiteread.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.clilystudio.quiteread.db.BookDlRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BookDlRecord".
*/
public class BookDlRecordDao extends AbstractDao<BookDlRecord, Void> {

    public static final String TABLENAME = "BookDlRecord";

    /**
     * Properties of entity BookDlRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Author = new Property(0, String.class, "author", false, "author");
        public final static Property BookId = new Property(1, String.class, "bookId", false, "bookId");
        public final static Property BookTitle = new Property(2, String.class, "bookTitle", false, "bookTitle");
        public final static Property Created = new Property(3, java.util.Date.class, "created", false, "created");
        public final static Property Mode = new Property(4, int.class, "mode", false, "mode");
        public final static Property Progress = new Property(5, int.class, "progress", false, "progress");
        public final static Property Start = new Property(6, int.class, "start", false, "start");
        public final static Property Status = new Property(7, int.class, "status", false, "status");
        public final static Property TocId = new Property(8, String.class, "tocId", false, "tocId");
        public final static Property Total = new Property(9, int.class, "total", false, "total");
    }


    public BookDlRecordDao(DaoConfig config) {
        super(config);
    }
    
    public BookDlRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BookDlRecord\" (" + //
                "\"author\" TEXT," + // 0: author
                "\"bookId\" TEXT," + // 1: bookId
                "\"bookTitle\" TEXT," + // 2: bookTitle
                "\"created\" INTEGER," + // 3: created
                "\"mode\" INTEGER NOT NULL ," + // 4: mode
                "\"progress\" INTEGER NOT NULL ," + // 5: progress
                "\"start\" INTEGER NOT NULL ," + // 6: start
                "\"status\" INTEGER NOT NULL ," + // 7: status
                "\"tocId\" TEXT," + // 8: tocId
                "\"total\" INTEGER NOT NULL );"); // 9: total
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BookDlRecord\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookDlRecord entity) {
        stmt.clearBindings();
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(1, author);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(2, bookId);
        }
 
        String bookTitle = entity.getBookTitle();
        if (bookTitle != null) {
            stmt.bindString(3, bookTitle);
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(4, created.getTime());
        }
        stmt.bindLong(5, entity.getMode());
        stmt.bindLong(6, entity.getProgress());
        stmt.bindLong(7, entity.getStart());
        stmt.bindLong(8, entity.getStatus());
 
        String tocId = entity.getTocId();
        if (tocId != null) {
            stmt.bindString(9, tocId);
        }
        stmt.bindLong(10, entity.getTotal());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookDlRecord entity) {
        stmt.clearBindings();
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(1, author);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(2, bookId);
        }
 
        String bookTitle = entity.getBookTitle();
        if (bookTitle != null) {
            stmt.bindString(3, bookTitle);
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(4, created.getTime());
        }
        stmt.bindLong(5, entity.getMode());
        stmt.bindLong(6, entity.getProgress());
        stmt.bindLong(7, entity.getStart());
        stmt.bindLong(8, entity.getStatus());
 
        String tocId = entity.getTocId();
        if (tocId != null) {
            stmt.bindString(9, tocId);
        }
        stmt.bindLong(10, entity.getTotal());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BookDlRecord readEntity(Cursor cursor, int offset) {
        BookDlRecord entity = new BookDlRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // author
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookTitle
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // created
            cursor.getInt(offset + 4), // mode
            cursor.getInt(offset + 5), // progress
            cursor.getInt(offset + 6), // start
            cursor.getInt(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tocId
            cursor.getInt(offset + 9) // total
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookDlRecord entity, int offset) {
        entity.setAuthor(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreated(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setMode(cursor.getInt(offset + 4));
        entity.setProgress(cursor.getInt(offset + 5));
        entity.setStart(cursor.getInt(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
        entity.setTocId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTotal(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BookDlRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BookDlRecord entity) {
        return null;
    }

    @Override
    public boolean hasKey(BookDlRecord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
